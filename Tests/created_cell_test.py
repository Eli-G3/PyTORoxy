import hashlib
import cell
from crypto import core_crypto
import os
import pack

#
# buffer = b'\x88\x88ws\x02\xc8\xba9\x0f*\xb1\x082+\x18j\xa1[' \
#                b'A\xe2\xf3\x1b\xb1F\x83A\r\x9db\xf2\x8a\xe4\xec\x95"\xa8\xd0T\xfa\xebe\xd8\x8f\x1c\xaa\xd8q\x1f\xd1' \
#                b'\x04\xb9\xe9\xfe!D\xb8\xb39\x9cI\x82\x1a\xbc\xe5pSLe!$\xa9""\x14\x87\xdf(' \
#                b'\x92\x9d\xf4\xf6\xd2gU\xb9le17\xfb?*\x9f\\vN\xf0\xee:\xb8\x04U\xa0p\x1d[' \
#                b'-\xfc~\x82\xea\x93\xf9-\x1d\xe0\x08d\xa6\xc9\xaa\n\xc4\xdeua\\>\xafn\xad\xe4\x1b#\xab\x08\xcf(' \
#                b'U\xca\xa4\xe3Q\xa4`\xb9\x08\x80]B\x10+\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' \
#                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 '
#
# created_cell = cell.CreatedCell(link_version=5)
# created_cell.unpack_cell(buffer)
# DH.derrive_shared_key(x, created_cell.handshake_data, created_cell.hash_of_dhkey)

def send(cell, target_node, keys):

    for i in range(target_node, -1, -1):
        cell.payload = core_crypto.SymCipher.AES_encrypt(keys[i], cell.payload)
        print("CircID:{}\nCommand:{}\nPayload:{}".format(cell.circID, cell.command, cell.payload))
    # after encryption send through socket
    cell_bytes = pack.pack_cell(cell)
    print("CircID:{}\nCommand:{}\nPayload:{}".format(cell.circID, cell.command, cell.payload))


def receive(cell, keys, target):
    counter = 0
    while counter < target:
        print("First byte: {}".format(pack.check_first_byte(cell.payload)))
        cell.decrypt_payload(keys[counter])
        print("Payload:{}".format(cell.payload))
        counter += 1

fkeys = [bytearray(b'NG\xdfq&\xfb\xcak\xa62\xf7|\x96\x89z\x9d'), bytearray(b'2]q\xdeA*_<\xd1,\x18\x17cz\xed\t'), b'ks']
bkeys = [bytearray(b'&uR\x1c:\xb9w\x12\x88\xc3h\x85Mp\xa7\x1f'), bytearray(b'r\xd5\xcb\xe2\xb93\xe5\xf0HP!\xd3\xa2\xfb\x1f\xdb'), b'de']


extend_cell = cell.RelayExtend(circID=5, link_version=5,
                                             address=None, port=None, onion_skin=None,
                                             identity_fingerprint=None)
extend_cell.payload = b'\x06\x00\x00\x00\x00\xa2%\x17=\x00\xd4\xbc\x7fE<\x01\xbbmy3\xafR\xb8\x8dA\x94\x0f\xc8\x01' \
                      b'@\xbf\x1e\x81g\xdaA\x02\x08P\xf2\xe2\x95\x88x\x9bw\xc6\x93\x16JB\x94\x17\xc9H\xeb\xd89\xaa' \
                      b'+\xd0>\x0cw?\xb7\xc7^\xebr\xb0G\x99v\xdcLG\xa7\x04\xa7F\x9e\xdfL\xfd\xe5\x80\x1b(' \
                      b'\xa9\xedE\x83YG\xb46h\xe4\xda\xda\xe9 ' \
                      b'\xbb\xedm\x9e\x14\xbcP\xacK\x02k\x92\xee\x07\xcfb\x01\x8d\xf8\xd3\x95\xfdj\x91\xfe\x07\x92' \
                      b'\xef\'_\xd1\xfck\x7f\xff\xbc\xf8j\x9f,2\x06\xe1\xe84\xbdqP]\xd6\xc5\xf2\xc7\xf0G ' \
                      b'\x87\x9azB\x0e\xce\xf9\x85\xba\xc4\x81\xdb\x0eT\xad\xa5k0\xe8\x0b\x04@%\x1fyG\xe5\xd5\xe0' \
                      b'\xa3t\x03\xac\xc8h \xe6=6\xd9O|\xa9G\x9b+\xc7\xef\xd6a\x07*\xfa\xdcS;\xe8\xdc\xf1\xc1\x9d\x8c' \
                      b'-\xcc[\xe6\x14A\xf7\t:\xa7\x8a\xfeh\x17\xc6\xf2y\xc0\xdd\xb9\x9e\xb8f\xe8m\xa4\x06\x02\x06' \
                      b'\xeaY\xfb\x1cQAy\xf7\x97/\xaf\xb5\x82\xc8\x13\xe1%v\xf2\xe2\x7f\xc7\xc9\xa1\xf9\xe6\x98\xd6' \
                      b'-\xff\xec\xa2\xfe\x10\x9d\\]\x9c\xd5\x9c]\x06k\x12\x88\xdf\xcb\x84|\x86\x14\xe6\x83\x1f\x0c6' \
                      b'\x12 \xf9#S\xc5\xe4!\xb0-\xb0\x9e\x11\x01\xfb\x19\xa8\x08\x0f\x06\x10c\xdb\x15\x02+@\x1b\x7f' \
                      b'\x10fRxJJ\x11}\'1\xf2\xafenb\xdc\xa1\x11\xbaQ\t\x14l\xec\xcd\xe5\x85\xf2:y\xbb\xe4\xdf\xd0\tc' \
                      b'\x1ed\xf0T\xdd\xcdj\xcb`\x9f\x85]\xec3F\xad\xf3\xd0da\xb2\xcc\x91I\x1e\xb1\xceN\x86U\xa9\xd5' \
                      b'\xc9\x1e0\xaa}Y\x03(}I\xaf\x81\xb6\xf7\xaa:3\xd8|i\xb8\x17\x1c\x99z\x88\xca\xbf\xc5\xb5\x85' \
                      b'.\x1d&i\x1a\x86%Oe\t\x91\xfb\xba\x17?\xd3\xd0\x15\xfe_\xa2i\xd8\xbf\xae\x1b~\x04\x1f[' \
                      b'\xcd+E\x1c\xdb\xf6\x06J\xbc\x9c\x7f\x15\xb6H\x89\x80"\xc6\xd9\x9b\x86\xf1@\x9dsq\x14\xb2\x97' \
                      b'\x98\xa2\xc1\xb9\xc7\xc7\xdc4\xd2\xbf\x89,\xf6\xef\xdd\xac'
send(extend_cell, 1, bkeys)
receive(extend_cell, bkeys, 2)